@use 'sass:math';

$imageWidth: 600px;
$imageHeight: 400px;

body,
.box {
  background: black;
  // 视距
  perspective: 2000px;
}

.cycle {
  width: 100vw;
  height: 400px;
  margin-bottom: 10px;
  transform-style: preserve-3d;
  animation: rotate 30s infinite linear;
  margin: 10px 0;

  .item {
    position: absolute;
    border: 5px solid white;
    // 禁止鼠标拖动
    width: $imageWidth;
    height: $imageHeight;
    left: 50%;
    top: 50%;
    margin-left: -$imageWidth / 2;
    margin-top: -$imageHeight / 2;
    // 半径
    $r: 100px;
    // 图片数量
    $n: 10;
    $pictureRadian: 360deg / $n;
    // 当元素处于背面时，不可见
    backface-visibility: hidden;
    // 倒影
    // -webkit-box-reflect: below 10px -webkit-linear-gradient(transparent, transparent
    //       50%, rgba(255, 255, 255, 0.3));
    @for $i from 0 through $n - 1 {
      &:nth-child(#{$i + 1}) {
        $deg: $pictureRadian * $i;
        $x: math.sin($deg) * $r;
        $z: math.cos($deg) * $r;
        transform: translate3d(#{$x}, 0, #{$z}) rotateY(180deg + $deg);
      }
    }
  }
}

.two {
  width: 100vw;
  height: 400px;
  transform-style: preserve-3d;
  animation: rotate 30s infinite linear;
  .item {
    position: absolute;
    border: 5px solid white;
    // 禁止鼠标拖动
    width: $imageWidth;
    height: $imageHeight;
    left: 50%;
    top: 50%;
    margin-left: -$imageWidth / 2;
    margin-top: -$imageHeight / 2;
    // 半径
    $r: 1000px;
    // 图片数量
    $n: 10;
      /* 计算每个图片之间的弧度    为了确保每个图片均匀的分布在圆周上*/
    $pictureRadian: 360deg / $n;
    // 当元素处于背面时，不可见
    backface-visibility: hidden;
    // 倒影
    // -webkit-box-reflect: below 10px -webkit-linear-gradient(transparent, transparent
    //       50%, rgba(255, 255, 255, 0.3));
    @for $i from 0 through $n - 1 {
      &:nth-child(#{$i + 1}) {
        $deg: $pictureRadian * $i;   // 得到了当前图片相对于起始位置（0度）的角度
        $x: math.sin($deg) * $r;    //  我们得到了当前图片在3D空间中的X坐标
        $z: math.cos($deg) * $r;   //   当前图片在3D空间中的Z坐标
        transform: translate3d(#{$x}, 0, #{$z}) rotateY(180deg + $deg);   //图片就会被放置在以中心点为原点的3D坐标系中的正确位置上
      }
    }
  }
}
// @keyframes rotate {
//   from {
//     transform: rotateY(0deg);
//   }
//   to {
//     transform: rotateY(360deg);
//   }
// }
